import rospy
import math
import numpy as np
from nav_msgs.msg import Odometry
from autominy_msgs.msg import SteeringCommand
from map import Lane  
from steering_pid import SteeringPID
from autominy_msgs.msg import SpeedCommand

class Ass_11:

	def __init__(self):
		rospy.init_node("ass_11")

		self.steering_pub = rospy.Publisher("/control/steering", SteeringCommand, queue_size=10)
		self.localization_sub = rospy.Subscriber("/sensors/localization/filtered_map", Odometry, self.on_localization, queue_size=1)
		self.speed = rospy.Publisher("/actuators/speed", SpeedCommand, queue_size=80)
		self.KONSTANTE = 100
		self.lane_1 = np.load("lane1.npy")
		self.lane_2 = np.load("lane2.npy")
		self.lanes = [
		    Lane(self.lane_1[[0, 50, 209, 259, 309, 350, 409, 509, 639, 750, 848, 948, 1028, 1148, 1200, 1276], :]),
		    Lane(self.lane_2[[0, 50, 100, 150, 209, 400, 600, 738, 800, 850, 900, 949, 1150, 1300, 1476], :])]
                self.rate = rospy.Rate(100)
             
		
   		speed_cmd = SpeedCommand()
    		speed_cmd.value = 0.2
   		self.speed.publish(speed_cmd)
                rospy.loginfo("\nSpeed:\n"+str(speed_cmd))
		while not rospy.is_shutdown():
			    self.rate.sleep()

	def on_localization(self, msg):
		self.odom = msg
		car_pose = np.array([self.odom.pose.pose.position.x, self.odom.pose.pose.position.y])
		lookahead, param = self.lanes[0].lookahead_point(car_pose, 0.5)
		 
		dy = lookahead[0][1]-car_pose[1]
		dx = lookahead[0][0]-car_pose[0]
		delta = math.atan2(dy,dx) #Auto zu Lookahead Point ist differenz vektor winkel 
		theta = math.asin(self.odom.pose.pose.orientation.z)*2
 
                #rospy.loginfo("\nDelta -Theta:\n"+str(delta-theta))
		if((delta-theta)<0):# => rechts lenken
			steering_cmd = SteeringCommand()
	       		steering_cmd.value  = -self.KONSTANTE
	  	elif((delta-theta)>0):  # => links lenken
			steering_cmd = SteeringCommand()
	       		steering_cmd.value  = self.KONSTANTE
		        
		self.steering_pub.publish(steering_cmd)


if __name__ == "__main__":
    Ass_11()
    rospy.spin()
