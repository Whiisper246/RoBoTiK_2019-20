import rospy
import numpy as np
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point, PointStamped
from scipy.interpolate import CubicSpline
import matplotlib.pyplot as plt
import random
import math 


clickedPoint = Point()

lane1 = np.load("lane1.npy")
lane2 = np.load("lane2.npy")

def updatePoint(data):
    global clickedPoint 
    clickedPoint = data.point


def genMarker(points):
    marker = Marker()
    marker.header.frame_id ="map"
    marker.type = 4
    marker.points = points
    marker.color.b = 1.0
    marker.color.a = 1.0
    marker.scale.x = 0.1
    marker.scale.y = 0.1
    marker.scale.z = 0.1
    return marker

def genClickedMarker(point):
    marker = Marker()
    marker.header.frame_id ="map"
    marker.type = 2
    marker.pose.position = point
    marker.color.r = 1.0
    marker.color.a = 1.0
    marker.scale.x = 0.1
    marker.scale.y = 0.1
    marker.scale.z = 0.1
    return marker

def getSpline(points):
    arc = points[:,0]
    x = points[:,1]
    y = points[:,2]
    return arc, CubicSpline(arc, x), CubicSpline(arc,y)

def getSplinePoints( arc, SplineX, SplineY):
    SplineX = SplineX(arc)
    SplineY = SplineY(arc)
    points = []
    for i in range(len(SplineX)):
       points.append(Point(x=SplineX[i],y=SplineY[i],z=0.0))

    return points

def genRandSubset(quadrant):
    randomIndex = []
    for r in range(0,10):  
        randomIndex.append(random.randint(0,len(quadrant)-1))
    reduced = []
    for i in randomIndex:
        reduced.append(quadrant[i])
    return reduced

def searchPoints(lane):
    i = 0
    # Einteilung in Quadranten nach dem Kathesischen Koordinaten System
    quadrant_1 = [] # oben ------
    quadrant_2 = [] # links Kurve
    quadrant_3 = [] # unten ------
    quadrant_4 = [] # rechts kurve

    for p in lane:
       int_arc = int(p[0])
       if (int_arc>=9)and(int_arc<13):
          quadrant_4.append(p)
       elif (int_arc>=0)and(int_arc<3):
          quadrant_1.append(p)
       elif (int_arc>=3)and(int_arc<6):
          quadrant_2.append(p)
       elif (int_arc>=6)and(int_arc<9):
          quadrant_3.append(p)

    reduced_q1 = genRandSubset(quadrant_1)
    reduced_q2 = genRandSubset(quadrant_2)
    reduced_q3 = genRandSubset(quadrant_3)
    reduced_q4 = genRandSubset(quadrant_4)
    
    points = np.concatenate([reduced_q1,reduced_q2,reduced_q3,reduced_q4])
    points = points[points[:,0].argsort()]
    # 5 random gewaehlte Punkte aus jedem Quadranten
    return points

def distance(point_1, point_2):
    x_1, y_1 = point_1
    x_2, y_2 = point_2
    return math.sqrt((x_1 - x_2)*(x_1 - x_2) +(y_1 - y_2)* (y_1 -y_2))

def smallestDistancePoint(point, points):
    x_1, y_1 = point
    distance = 100000
    closest_point = Point()
    for i in range(len(points)):
        accPoint = points[i]
        arc, x_2, y_2 = accPoint
        accDistance = math.sqrt((x_1 - x_2)*(x_1 - x_2) +(y_1 - y_2)* (y_1 -y_2))
        if accDistance < distance:
           distance = accDistance
           closest_point = points[i]
    return closest_point


def clostestPoint(givenPos, spline):
    arc, SplineX, SplineY = spline
    leftIndex = 0
    rightIndex = len(arc)
    amount = len(arc)
    point = Point()
    globalcounter =0 
    while(amount>3):
        pointsOnSpline = []
        for i in range(leftIndex, rightIndex):
            pointsOnSpline.append((i,SplineX(arc[i]),SplineY(arc[i])))
            amount = len(pointsOnSpline)
        point = smallestDistancePoint(givenPos, pointsOnSpline)
        leftIndex = (point[0] - 1) 
        rightIndex = (point[0] + 1)

    point = Point(x= point[1], y = point[2], z= 0.0)

#    print(point)
    return point


def lookaheadPoint(givenPos, spline, lookahead = 3):
    arc, SplineX, SplineY = spline
    closest_Point = clostestPoint(givenPos, spline)
    lookahead_Point = Point()
    pointsInRange = []
    biggestDiestance = 0
    for i in range(0, len(arc)):
        accDistance = math.sqrt((closest_Point.x - SplineX(arc[i]))*(closest_Point.x - SplineX(arc[i])) +(closest_Point.y - SplineY(arc[i]))* (closest_Point.y -SplineY(arc[i])))
        if(accDistance >= lookahead):
           pointsInRange.append((SplineX(arc[i]),SplineY(arc[i])))
     
    
    for i in range(len(pointsInRange)):
        accPoint = pointsInRange[i]
        x_2, y_2 = accPoint
        accDistance = math.sqrt((closest_Point.x - x_2)*(closest_Point.x - x_2) +(closest_Point.y - y_2)* (closest_Point.y -y_2))
        if accDistance > biggestDiestance:
           biggestDiestance = accDistance
           lookahead_Point = pointsInRange[i]
    point = Point(x= lookahead_Point[0], y = lookahead_Point[1], z= 0.0)
    return point


def main():
    print("Started")
    global clickedPoint
    rospy.init_node("ass_10")

    sub_Click = rospy.Subscriber("/clicked_point", PointStamped, updatePoint)
    pub_Marker = rospy.Publisher("/SplineMarker", Marker, queue_size=100)
    pub_ClickedPoint = rospy.Publisher("/ClickedPoint", Marker, queue_size=100)
    pub_ClosestPoint = rospy.Publisher("/ClosestPoint", Marker, queue_size=100)
    pub_LookaheadPoint = rospy.Publisher("/LookaheadPoint", Marker, queue_size=100)

    lane1_points = searchPoints(lane1)
    spline_1 = getSpline(lane1_points)
    pointsSpline_1 =getSplinePoints(*spline_1)
    marker_1 = genMarker(pointsSpline_1)

    while not rospy.is_shutdown():
        pub_Marker.publish(marker_1)
        clostestPoint_1 = clostestPoint((clickedPoint.x, clickedPoint.y),spline_1)
        lookaheadPoint_1 = lookaheadPoint((clickedPoint.x, clickedPoint.y),spline_1)
        clostestPoint_Marker_1 = genClickedMarker(clostestPoint_1)
        lookaheadPoint_Marker_1 = genClickedMarker(lookaheadPoint_1)
        clickedPoint_Marker_1 = genClickedMarker( Point(x=clickedPoint.x, y = clickedPoint.y, z=0.0 ))
        pub_ClosestPoint.publish(clostestPoint_Marker_1)
        pub_LookaheadPoint.publish(lookaheadPoint_Marker_1)
        pub_ClickedPoint.publish(clickedPoint_Marker_1)


if __name__ == '__main__':
    main()


rospy.spin()
